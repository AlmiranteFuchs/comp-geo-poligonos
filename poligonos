#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Geometry_1 = require("./src/Geometry");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const getStdin = yield Promise.resolve().then(() => __importStar(require('get-stdin')));
        const input = yield getStdin.default();
        let currLine = 0;
        const lines = input.trim().split('\n');
        const totalPolyCount = parseInt(lines[0].split(' ')[0]);
        const pointsToFindCount = parseInt(lines[0].split(' ')[1]);
        currLine++;
        let polygons = [];
        // console.log(`polyCount: ${totalPolyCount}, pointCount: ${pointsToFindCount}`);
        // Read n polygons
        for (let polygonsI = 0; polygonsI < totalPolyCount; polygonsI++) {
            // Read the points of this polygon
            const polyPointsCount = parseInt(lines[currLine].trim());
            currLine++;
            // console.log(`Reading ${polyPointsCount} Points`);
            let segments = [];
            for (let polyPoints = 0; polyPoints < polyPointsCount - 1; polyPoints++) {
                let localNextLine = currLine;
                const point1 = parseInt(lines[localNextLine].split(' ')[0]);
                const point2 = parseInt(lines[localNextLine].split(' ')[1]);
                localNextLine++;
                const point3 = parseInt(lines[localNextLine].split(' ')[0]);
                const point4 = parseInt(lines[localNextLine].split(' ')[1]);
                localNextLine++;
                segments.push(new Geometry_1.Segment(new Geometry_1.Point(point1, point2), new Geometry_1.Point(point3, point4)));
                // console.log(point1, point2, point3, point4);
                currLine++;
            }
            currLine++;
            // console.log(segments[segments.length - 1].finalP, segments[segments.length - (polyPointsCount - 1)].initP);
            segments.push(new Geometry_1.Segment(segments[segments.length - 1].finalP, segments[segments.length - (polyPointsCount - 1)].initP));
            // console.log("\n");
            polygons.push(new Geometry_1.Polygon(segments));
            console.log(`${polygonsI + 1} ${polygons[polygonsI].isSimple() ? 'simples' : 'nao simples'} e ${polygons[polygonsI].isConvex() ? 'convexo' : 'nao convexo'}`);
        }
        for (let i = 0; i < pointsToFindCount; i++) {
            const x = parseInt(lines[currLine].split(' ')[0]);
            const y = parseInt(lines[currLine].split(' ')[1]);
            currLine++;
            let out = `${i + 1}:`;
            polygons.forEach((poly, l) => {
                if (poly.containsPoint(new Geometry_1.Point(x, y))) {
                    out += `${l + 1} `;
                }
            });
            console.log(out);
        }
    });
}
main();
